{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"goops","text":"<p>Develop reliable, simple, and fast Juju Charms in Go</p> <p><code>goops</code> is a Go library for developing simple and robust Juju charms. Write, test, build, and deploy your charm in minutes with goops.</p> <pre><code>package charm\n\nimport (\n    \"fmt\"\n\n    \"github.com/gruyaume/goops\"\n)\n\nfunc Configure() error {\n    isLeader, err := goops.IsLeader()\n    if err != nil {\n        return fmt.Errorf(\"could not check if unit is leader: %w\", err)\n    }\n\n    if !isLeader {\n        goops.SetUnitStatus(goops.StatusBlocked, \"Unit is not leader\")\n        return nil\n    }\n\n    err = goops.SetPorts([]*goops.Port{\n        {\n            Port:     2111,\n            Protocol: \"tcp\",\n        },\n    })\n    if err != nil {\n        return fmt.Errorf(\"could not set ports: %w\", err)\n    }\n\n    goops.SetUnitStatus(goops.StatusActive, fmt.Sprintf(\"Port %d/tcp is set\", 2111))\n\n    return nil\n}\n</code></pre>"},{"location":"#in-this-documentation","title":"In this documentation","text":"<ul> <li> <p>Tutorials</p> <p>Start here: a hands-on introduction to goops for new users. Write, build and deploy your first charm in minutes.</p> </li> <li> <p>How-to Guides</p> <p>Step-by-step guides covering key operations such as managing config, integrations, and workloads.</p> </li> <li> <p>Reference</p> <p>Technical information - API, example charms, charm libraries, best practices, and more.</p> </li> <li> <p>Explanation</p> <p>Discussion and clarification of key topics like unit testing, and handling hooks.</p> </li> </ul>"},{"location":"explanation/","title":"Explanation","text":"<p>The following explanations provide context and clarification on key-topics related to the use of goops.</p> <ul> <li>Handling Hooks</li> <li>Integrating</li> <li>Unit Testing</li> <li>Design Principles</li> </ul>"},{"location":"explanation/design_principles/","title":"Design principles","text":"<p><code>goops</code> is designed with a set of principles that guide its development. These principles are intended to ensure that <code>goops</code> remains focused on its core mission: developing reliable and simple charms in Go.</p>"},{"location":"explanation/design_principles/#1-reliability","title":"1. Reliability","text":"<p>Charms are meant to be deployed at scale, in production environments, and in mission-critical applications. <code>goops</code> is designed to be reliable and predictable, ensuring that your charms behave consistently across different environments.</p>"},{"location":"explanation/design_principles/#2-simplicity","title":"2. Simplicity","text":"<p><code>goops</code> serves as a minimal mapping between Juju and Go constructs. <code>goops</code> is not a framework; it does not impose charm design patterns. You call <code>goops</code>, it does not call you.</p>"},{"location":"explanation/handling_hooks/","title":"Handling Hooks","text":"<p>In Juju, a hook is a notification to the charm that the internal representation of Juju has changed in a way that requires a reaction from the charm so that the unit\u2019s state and the controller\u2019s state can be reconciled. You can find the list of available hooks and more hook-related information in the Juju documentation.</p>"},{"location":"explanation/handling_hooks/#hook-execution","title":"Hook execution","text":"<p>This notification is sent in the form of Juju executing the charm binary with a specific set of environment variables. The charm binary is expected to handle the hook by comparing its existing state with the intended state and performing the necessary actions to reconcile them.</p> <p>Juju expects the charm binary to be named <code>dispatch</code> and to be located in the charm root directory. This is why we inform charmcraft to rename the binary to <code>dispatch</code> in the <code>charmcraft.yaml</code> file.</p> <pre><code>parts:\n  charm:\n    source: .\n    plugin: go\n    build-snaps:\n      - go\n    organize:\n      bin/example: dispatch\n</code></pre>"},{"location":"explanation/handling_hooks/#handling-hooks-with-goops","title":"Handling hooks with <code>goops</code>","text":"<p>During the hook execution <code>goops</code> provides access to the following:</p> <ul> <li>Hook Commands: <code>goops</code> exposes every Juju hook commands, as a Go function.</li> <li>Environment Variables: <code>goops</code> provides access to every Juju-defined environment variables.</li> <li>Charm metadata: <code>goops</code> provides access to the charm metadata as defined in <code>charmcraft.yaml</code>.</li> <li>Pebble: <code>goops</code> provides access to the Pebble API, allowing you to manage services and containers for Kubernetes charms.</li> </ul>"},{"location":"explanation/handling_hooks/#independent-hook-handling","title":"Independent hook handling","text":"<p>The hook name is made available by Juju through an environment variable. In your charm, you can access it using the <code>ReadEnv()</code> function and handle it accordingly.</p> <pre><code>package main\n\nimport (\n    \"os\"\n\n    \"github.com/gruyaume/goops\"\n    \"github.com/gruyaume/goops/internal/charm\"\n)\n\nfunc main() {\n    env := goops.ReadEnv()\n\n    switch env.HookName {\n    case \"install\":\n        err := charm.Install()\n        if err != nil {\n            goops.LogErrorf(\"Error handling install hook: %s\", err.Error())\n            os.Exit(1)\n        }\n    case \"remove\":\n        err := charm.Remove()\n        if err != nil {\n            goops.LogErrorf(\"Error handling remove hook: %s\", err.Error())\n            os.Exit(1)\n        }\n    case \"\":\n        goops.LogInfof(\"No hook name provided, running default configuration.\")\n    default:\n        err := charm.Configure()\n        if err != nil {\n            goops.LogErrorf(\"Error handling default hook: %s\", err.Error())\n            os.Exit(1)\n        }\n    }\n}\n</code></pre>"},{"location":"explanation/integrating/","title":"Integrating <code>goops</code> charms","text":""},{"location":"explanation/integrating/#integrations","title":"Integrations","text":"<p>In Juju, integrations are connections between charms, allowing them to share data through standardized interfaces. Common integrations exist for database access, TLS certificates, and much more. Integration specifications are defined centrally at github.com/canonical/charm-relation-interfaces.</p>"},{"location":"explanation/integrating/#goops-charms-integrate-with-other-charms","title":"goops charms integrate with other charms","text":"<p><code>goops</code> charms can integrate with other charms using the same integration specifications. We maintain a set of Charm Libraries for commonly used interfaces, allowing <code>goops</code> charms to integrate with many charms in the ecosystem, whether they are written in Python, Go, or any other language.</p>"},{"location":"explanation/unit_testing/","title":"Unit Testing with <code>goopstest</code>","text":"<p><code>goopstest</code> is a unit testing framework for <code>goops</code> charms. It allows you to simulate Juju environments and test your charm logic without needing a live Juju controller.</p> <p><code>goopstest</code> allows users to write unit tests in a \"state-transition\" style. Each test includes the following concepts:</p> <ul> <li>Context: Charm function under test, Juju version, and other relevant context information.</li> <li>State: Resources accessible to the charm, including status, leadership, configuration, relations.</li> <li>Event: Hook name that will be run (ex. <code>install</code>, <code>start</code>, <code>stop</code>, etc.).</li> </ul> <p>Charm developers are expected to write tests that follow the Arrange-Act-Assert pattern:</p> <ul> <li>Arrange: Declare the context and input state.</li> <li>Act: Execute a hook.</li> <li>Assert: Verify that the output state matches the expected state.</li> </ul>"},{"location":"explanation/unit_testing/#examples","title":"Examples","text":""},{"location":"explanation/unit_testing/#example-1-a-basic-charm","title":"Example 1: A basic charm","text":"<p>Here's an example of a simple charm that uses <code>goops</code> to check if the unit is a leader and set its status accordingly:</p> <pre><code>package charm\n\nimport (\n    \"github.com/gruyaume/goops\"\n)\n\nfunc Configure() error {\n    isLeader, err := goops.IsLeader()\n    if err != nil {\n        return err\n    }\n\n    if !isLeader {\n        _ = goops.SetUnitStatus(goops.StatusBlocked, \"Unit is not a leader\")\n        return nil\n    }\n\n    _ = goops.SetUnitStatus(goops.StatusActive, \"Charm is active\")\n\n    return nil\n}\n</code></pre> <p>And here's the corresponding unit test written using <code>goopstest</code>:</p> <pre><code>package charm_test\n\nimport (\n    \"testing\"\n\n    \"github.com/gruyaume/goops/goopstest\"\n)\n\nfunc TestCharm(t *testing.T) {\n    // Arrange\n    ctx := goopstest.NewContext(Configure)\n\n    stateIn := goopstest.State{\n        Leader: false,\n    }\n\n    // Act\n    stateOut := ctx.Run(\"install\", stateIn)\n\n    // Assert\n    expectedStatus := goopstest.Status{\n        Name:    goopstest.StatusBlocked,\n        Message: \"Unit is not a leader\",\n    }\n    if stateOut.UnitStatus != expectedStatus {\n        t.Errorf(\"Expected unit status %v, got %v\", expectedStatus, stateOut.UnitStatus)\n    }\n}\n</code></pre>"},{"location":"explanation/unit_testing/#example-2-a-kubernetes-charm","title":"Example 2: A Kubernetes charm","text":"<p>Here's a Kubernetes charm example that uses <code>goops</code> to configure a Pebble service and start it:</p> <pre><code>package charm\n\nimport (\n    \"fmt\"\n    \"strings\"\n\n    \"github.com/canonical/pebble/client\"\n    \"github.com/gruyaume/goops\"\n    \"gopkg.in/yaml.v3\"\n)\n\nfunc Configure() error {\n    pebble := goops.Pebble(\"example\")\n\n    _, err := pebble.SysInfo()\n    if err != nil {\n        return fmt.Errorf(\"cannot connect to Pebble: %w\", err)\n    }\n\n    err = pebble.Push(&amp;client.PushOptions{\n        Source: strings.NewReader(`# Example configuration file`),\n        Path:   \"/etc/config.yaml\",\n    })\n    if err != nil {\n        return fmt.Errorf(\"could not push file: %w\", err)\n    }\n\n    layerData, err := yaml.Marshal(PebbleLayer{\n        Summary:     \"My service layer\",\n        Description: \"This layer configures my service\",\n        Services: map[string]ServiceConfig{\n            \"my-service\": {\n                Startup:  \"enabled\",\n                Override: \"replace\",\n                Command:  \"/bin/my-service --config /etc/my-service/config.yaml\",\n            },\n        },\n    })\n    if err != nil {\n        return fmt.Errorf(\"could not marshal layer data to YAML: %w\", err)\n    }\n\n    err = pebble.AddLayer(&amp;client.AddLayerOptions{\n        Combine:   true,\n        Label:     \"example-layer\",\n        LayerData: layerData,\n    })\n    if err != nil {\n        return fmt.Errorf(\"could not add Pebble layer: %w\", err)\n    }\n\n    _, err = pebble.Start(&amp;client.ServiceOptions{\n        Names: []string{\"my-service\"},\n    })\n    if err != nil {\n        return fmt.Errorf(\"could not start Pebble service: %w\", err)\n    }\n\n    return nil\n}\n</code></pre> <p>And here's the corresponding unit test using <code>goopstest</code>:</p> <pre><code>package charm_test\n\nimport (\n    \"os\"\n    \"reflect\"\n    \"testing\"\n\n    \"github.com/canonical/pebble/client\"\n    \"github.com/gruyaume/goops/goopstest\"\n)\n\nfunc TestCharm(t *testing.T) {\n    // Arrange\n    ctx := goopstest.NewContext(Configure)\n\n    dname, err := os.MkdirTemp(\"\", \"sampledir\")\n    if err != nil {\n        t.Fatalf(\"Failed to create temporary directory: %v\", err)\n    }\n\n    defer os.RemoveAll(dname)\n\n    stateIn := goopstest.State{\n        Containers: []goopstest.Container{\n            {\n                Name:       \"example\",\n                CanConnect: true,\n                Mounts: map[string]goopstest.Mount{\n                    \"config\": {\n                        Location: \"/etc/config.yaml\",\n                        Source:   dname,\n                    },\n                },\n            },\n        },\n    }\n\n    // Act\n    stateOut := ctx.Run(\"install\", stateIn)\n\n    // Assert\n    if len(stateOut.Containers) != 1 {\n        t.Fatalf(\"Expected 1 container in stateOut, got %d\", len(stateOut.Containers))\n    }\n\n    if len(stateOut.Containers[0].Layers) != 1 {\n        t.Fatalf(\"Expected 1 Pebble layer in container, got %d\", len(stateOut.Containers[0].Layers))\n    }\n\n    expectedLayer := goopstest.Layer{\n        Summary:     \"My service layer\",\n        Description: \"This layer configures my service\",\n        Services: map[string]goopstest.Service{\n            \"my-service\": {\n                Startup:  \"enabled\",\n                Override: \"replace\",\n                Command:  \"/bin/my-service --config /etc/my-service/config.yaml\",\n            },\n        },\n        LogTargets: map[string]*goopstest.LogTarget{},\n    }\n\n    actualLayer := stateOut.Containers[0].Layers[\"example-layer\"]\n    if !reflect.DeepEqual(actualLayer, expectedLayer) {\n        t.Fatalf(\"Expected Pebble layer 'example-layer' to match expected configuration.\\nExpected: %+v\\nActual: %+v\", expectedLayer, actualLayer)\n    }\n\n    if stateOut.Containers[0].ServiceStatuses[\"my-service\"] != client.StatusActive {\n        t.Errorf(\"Expected service 'my-service' to be active, got %s\", stateOut.Containers[0].ServiceStatuses[\"my-service\"])\n    }\n\n    content, err := os.ReadFile(dname + \"/etc/config.yaml\")\n    if err != nil {\n        t.Fatalf(\"Failed to read pushed file: %v\", err)\n    }\n\n    if string(content) != \"# Example configuration file\" {\n        t.Errorf(\"Expected file content '# Example configuration file', got '%s'\", string(content))\n    }\n}\n</code></pre>"},{"location":"explanation/unit_testing/#other-resources","title":"Other resources","text":"<p>You can find more information about unit testing with <code>goopstest</code> in the following resources:</p> <ul> <li>How-to: test a charm</li> <li>goopstest API Documentation </li> </ul>"},{"location":"how_to/","title":"How-to Guides","text":"<p>These how-to guides cover key operations and tasks when working with <code>goops</code>.</p> <ul> <li>Write a Charm</li> <li>Test a Charm</li> <li>Build a Charm</li> <li>Perform other Charm operations</li> <li>Manage Charm resources</li> </ul>"},{"location":"how_to/build_a_charm/","title":"How-to build a Charm","text":""},{"location":"how_to/build_a_charm/#1-create-a-charmcraftyaml-file-with-the-go-plugin","title":"1. Create a <code>charmcraft.yaml</code> file with the Go plugin","text":"<p>To build a Go charm, you need to create a <code>charmcraft.yaml</code> file in the root of your charm project. Use the <code>go</code> plugin to build your charm in <code>charmcraft.yaml</code>:</p> <pre><code>parts:\n  charm:\n    source: .\n    plugin: go\n    build-snaps:\n      - go\n    organize:\n      bin/&lt;your-charm-name&gt;: dispatch\n</code></pre> <p>Here replace <code>&lt;your-charm-name&gt;</code> with the name of your charm. The <code>dispatch</code> file will be the entry point for your charm.</p> <p>Info</p> <p>For more information on the charmcraft charm definition, read the official charmcraft documentation.</p>"},{"location":"how_to/build_a_charm/#2-build-the-charm","title":"2. Build the charm","text":"<p>Build the charm:</p> <pre><code>charmcraft pack --verbose\n</code></pre>"},{"location":"how_to/perform_other_charm_operations/","title":"How-to perform other Charm operations","text":"<p>Other charm operations such as <code>deploying</code>, <code>publishing</code>, and <code>upgrading</code> are identical to those for charms written in Python or other languages. Using <code>goops</code> does not change the way you interact with Juju for these operations. For more information on these operations, refer to the Juju documentation.</p>"},{"location":"how_to/test_a_charm/","title":"How-to test a Charm","text":""},{"location":"how_to/test_a_charm/#1-write-the-test-cases","title":"1. Write the test cases","text":"<p>Create a <code>&lt;charm name&gt;_test.go</code> file in the same directory as your charm code. This file will contain the test cases for your charm using the <code>goopstest</code> package. Here we assume the charm name is <code>example</code>:</p> <pre><code>package charm_test\n\nimport (\n    \"example/internal/charm\"\n    \"testing\"\n\n    \"github.com/gruyaume/goops/goopstest\"\n)\n\nfunc TestConfigure(t *testing.T) {\n    ctx := goopstest.NewContext(charm.Configure)\n\n    stateIn := goopstest.State{\n        Leader: true,\n        Config: map[string]any{\n            \"username\": \"\",\n        },\n    }\n\n    stateOut := ctx.Run(\"install\", stateIn)\n\n    if ctx.CharmErr != nil {\n        t.Fatalf(\"Configure failed: %v\", ctx.CharmErr)\n    }\n\n    expectedStatus := goopstest.Status{\n        Name:    goopstest.StatusBlocked,\n        Message: \"Username is not set in config\",\n    }\n    if stateOut.UnitStatus != expectedStatus {\n        t.Errorf(\"expected unit status %v, got %v\", expectedStatus, stateOut.UnitStatus)\n    }\n}\n</code></pre> <p>Info</p> <p>Learn more about <code>goopstest</code>:</p> <ul> <li>Unit testing explanation</li> <li>goopstest API </li> </ul>"},{"location":"how_to/test_a_charm/#2-run-the-tests","title":"2. Run the tests","text":"<p>Run the tests using <code>go test ./... -v</code>: </p> <pre><code>(venv) guillaume@courge:~/example$ go test ./... -v\n?       example/cmd/example     [no test files]\n=== RUN   TestConfigure\n--- PASS: TestConfigure (0.00s)\nPASS\nok      example/internal/charm  0.002s\n</code></pre>"},{"location":"how_to/write_a_charm/","title":"How-to write a Charm","text":"<p>Create a new directory for your charm project and initialize a Go module. Here the charm name is <code>example</code>, replace it with your desired charm name:</p> <pre><code>mkdir example\ncd example\ngo mod init example\n</code></pre> <p>Create a <code>cmd/example/main.go</code> file with the following content:</p> <pre><code>package main\n\nimport (\n    \"os\"\n\n    \"example/internal/charm\"\n\n    \"github.com/gruyaume/goops\"\n)\n\nfunc main() {\n    env := goops.ReadEnv()\n\n    goops.LogInfof(\"Hook name: %s\", env.HookName)\n\n    err := charm.Configure()\n    if err != nil {\n        goops.LogErrorf(\"Error handling hook: %s\", err.Error())\n        os.Exit(1)\n    }\n}\n</code></pre> <p>Create a <code>internal/charm/charm.go</code> file with the charm logic. For example:</p> <pre><code>package charm\n\nimport (\n    \"fmt\"\n\n    \"github.com/gruyaume/goops\"\n)\n\ntype Config struct {\n    Username string `json:\"username\"`\n}\n\nfunc Configure() error {\n    isLeader, err := goops.IsLeader()\n    if err != nil {\n        return fmt.Errorf(\"could not check if unit is leader: %w\", err)\n    }\n\n    if !isLeader {\n        err := goops.SetUnitStatus(goops.StatusBlocked, \"Unit is not leader\")\n        if err != nil {\n            return fmt.Errorf(\"could not set unit status: %w\", err)\n        }\n        return nil\n    }\n\n    goops.LogInfof(\"Unit is leader\")\n\n    var config Config\n    err = goops.GetConfig(&amp;config)\n    if err != nil {\n        return fmt.Errorf(\"could not get config: %w\", err)\n    }\n\n    if config.Username == \"\" {\n        err := goops.SetUnitStatus(goops.StatusBlocked, \"Username is not set in config\")\n        if err != nil {\n            return fmt.Errorf(\"could not set unit status: %w\", err)\n        }\n        return nil\n    }\n\n    err = goops.SetUnitStatus(goops.StatusActive, fmt.Sprintf(\"Username is set to '%s'\", config.Username))\n    if err != nil {\n        return fmt.Errorf(\"could not set unit status: %w\", err)\n    }\n\n    return nil\n}\n</code></pre> <p>Install go dependencies:</p> <pre><code>go mod tidy\n</code></pre>"},{"location":"how_to/manage/","title":"How-to: Manage charm resources","text":"<p>These guides cover how to manage commonly used charm resources using <code>goops</code>:</p> <ul> <li>Integrations</li> <li>Config</li> <li>Secrets</li> <li>Actions</li> <li>State</li> <li>Workloads (on Kubernetes)</li> </ul> <p>You can also manage other resources not listed here (ex. ports, storage). For more information on managing those resources, refer to the goops API Documentation .</p>"},{"location":"how_to/manage/actions/","title":"How-to manage actions","text":"<p>Juju users can run actions in charms using the <code>juju run</code> command. Here we cover how you can use <code>goops</code> to handle those actions in your charm.</p>"},{"location":"how_to/manage/actions/#1-declare-actions","title":"1. Declare actions","text":"<p>Declare the actions in you charm's <code>charmcraft.yaml</code> file. For example:</p> <pre><code>actions:\n  get-password:\n    description: Return the password for the specified user.\n    params:\n      username:\n        type: string\n        description: &gt;-\n            The username for which to return the password.\n    required: [username]\n</code></pre> <p>Note</p> <p>For more information on the <code>charmcraft.yaml</code> charm definition, read the official charmcraft documentation.</p>"},{"location":"how_to/manage/actions/#2-read-the-action-name","title":"2. Read the action name","text":"<p>You can read the action name in your charm using <code>ReadEnv()</code>:</p> <pre><code>package main\n\nimport (\n    \"os\"\n\n    \"github.com/gruyaume/goops\"\n    \"github.com/gruyaume/goops/internal/charm\"\n)\n\nfunc main() {\n    env := goops.ReadEnv()\n\n    if env.ActionName != \"\" {\n        goops.LogInfof(\"Action name: %s\", env.ActionName)\n\n        switch env.ActionName {\n        case \"get-password\":\n            err := charm.HandleGetPasswordAction()\n            if err != nil {\n                goops.LogErrorf(\"Error handling get-password action: %s\", err.Error())\n                os.Exit(1)\n            }\n\n        default:\n            goops.LogErrorf(\"Action '%s' not recognized, exiting\", env.ActionName)\n            os.Exit(1)\n        }\n    }\n}\n</code></pre>"},{"location":"how_to/manage/actions/#3-handle-the-action","title":"3. Handle the action","text":"<p>You can handle the action in your charm. Here the charm reads the <code>username</code> parameter from the action and returns a password based on that username:</p> <pre><code>package charm\n\nimport (\n    \"fmt\"\n\n    \"github.com/gruyaume/goops\"\n)\n\ntype GetPasswordActionParams struct {\n    Username string `json:\"username\"`\n}\n\nfunc HandleGetPasswordAction() error {\n    params := GetPasswordActionParams{}\n\n    err := goops.GetActionParams(&amp;params)\n    if err != nil {\n        goops.FailActionf(\"could not get action parameters\")\n        return fmt.Errorf(\"could not get action parameters: %w\", err)\n    }\n\n    if params.Username == \"\" {\n        goops.FailActionf(\"Username is not set in action parameters\")\n        return nil\n    }\n\n    password := fmt.Sprintf(\"%s-12345\", params.Username)\n\n    err = goops.SetActionResults(map[string]string{\n        \"password\": password,\n    })\n\n    if err != nil {\n        return fmt.Errorf(\"could not set action result: %w\", err)\n    }\n\n    return nil\n}\n</code></pre> <p>Warning</p> <p>All action-related functions (ex. <code>GetActionParams</code>, <code>SetActionResults</code>) will fail if they are not called in the context of an action hook. I.e. <code>env.ActionName</code> must not be empty.</p> <p>Info</p> <p>Learn more about action management in charms:</p> <ul> <li>Juju Hook commands </li> <li>goops API reference </li> </ul>"},{"location":"how_to/manage/config/","title":"How-to manage config","text":"<p>Juju users can configure charms using the <code>juju config</code> command. Here we cover how you can use <code>goops</code> to read those configuration options in your charm.</p>"},{"location":"how_to/manage/config/#1-declare-configuration-options","title":"1. Declare configuration options","text":"<p>Declare the configuration options in you charm's <code>charmcraft.yaml</code> file. For example:</p> <pre><code>config:\n  options:\n    username:\n      type: string\n      default: gruyaume\n      description: &gt;\n        Example configuration option for this charm.\n</code></pre> <p>Note</p> <p>For more information on the <code>charmcraft.yaml</code> charm definition, read the official charmcraft documentation.</p>"},{"location":"how_to/manage/config/#2-read-configuration-options","title":"2. Read configuration options","text":"<p>You can read the configuration options in your charm using <code>GetConfig()</code>:</p> <pre><code>package charm\n\nimport (\n    \"fmt\"\n\n    \"github.com/gruyaume/goops\"\n)\n\ntype Config struct {\n    Username string `json:\"username\"`\n}\n\nfunc Configure() error {\n    c := Config{}\n\n    err := goops.GetConfig(&amp;c)\n    if err != nil {\n        return fmt.Errorf(\"could not get config: %w\", err)\n    }\n\n    goops.LogInfof(\"Configuring charm with username: %s\", c.Username)\n\n    return nil\n}\n</code></pre> <p>Info</p> <p>Learn more about config management in charms:</p> <ul> <li>Juju Hook commands </li> <li>goops API reference </li> </ul>"},{"location":"how_to/manage/integrations/","title":"How-to manage integrations","text":"<p>Integrations are a core part of Juju, allowing charms to connect and share data with each other. Here we cover how you can use <code>goops</code> to manage integrations.</p>"},{"location":"how_to/manage/integrations/#1-declare-the-relation-endpoint","title":"1. Declare the relation endpoint","text":"<p>To integrate with another charm, declare the relations in your charm\u2019s <code>charmcraft.yaml</code> file. Define a <code>provides</code> or <code>requires</code> endpoint including an interface name. By convention, the interface name should be unique in the ecosystem. Each relation must have an endpoint, which your charm will use to refer to the relation.</p> <p>For example, to declare a relation with a PostgreSQL database, you can add the following to your <code>charmcraft.yaml</code>:</p> <pre><code>requires:\n  db:\n    interface: postgresql_client\n    limit: 1\n</code></pre> <p>Note</p> <p>For more information on the <code>charmcraft.yaml</code> charm definition, read the official charmcraft documentation.</p>"},{"location":"how_to/manage/integrations/#2-read-and-write-relation-data","title":"2. Read and write relation data","text":"<p>You can manage relation data in two ways: directly using <code>goops</code> functions or indirectly using Charm Libraries.</p>"},{"location":"how_to/manage/integrations/#option-1-using-charm-libraries-recommended","title":"Option 1: Using Charm Libraries (recommended)","text":"<p>In most cases, charms should not directly read and write to relation data. Instead, they should do so indirectly using Charm Libraries, which encapsulate the relation logic.</p> <pre><code>package charm\n\nimport (\n    \"github.com/gruyaume/charm-libraries/postgresql\"\n)\n\nfunc GetDatabaseURL(relationName string) (string, error) {\n    i := &amp;postgresql.Integration{\n        RelationName: relationName,\n    }\n\n    return i.GetDatabaseURL()\n}\n</code></pre>"},{"location":"how_to/manage/integrations/#option-2-directly","title":"Option 2: Directly","text":"<p><code>goops</code> provides functions to manage relations, allowing you to get relation IDs, list relation units, and set or get relation data. Those are the same functions that Juju exposes through hook commands.</p> <p>For example, to get the database URL from a relation named <code>db</code>, you can use the following code:</p> <pre><code>package charm\n\nimport (\n    \"fmt\"\n\n    \"github.com/gruyaume/goops\"\n)\n\nfunc GetDatabaseURL(relationName string) (string, error) {\n    relationIDs, err := goops.GetRelationIDs(relationName)\n    if err != nil {\n        return \"\", fmt.Errorf(\"could not get relation IDs: %w\", err)\n    }\n\n    if len(relationIDs) == 0 {\n        return \"\", fmt.Errorf(\"no relation IDs found for %s\", relationName)\n    }\n\n    relationID := relationIDs[0]\n\n    relationUnits, err := goops.ListRelationUnits(relationID)\n    if err != nil {\n        return \"\", fmt.Errorf(\"could not get relation list: %w\", err)\n    }\n\n    if len(relationUnits) == 0 {\n        return \"\", fmt.Errorf(\"no relation units found for ID: %s\", relationID)\n    }\n\n    relationData, err := goops.GetAppRelationData(relationID, relationUnits[0])\n    if err != nil {\n        goops.LogDebugf(\"Could not get relation data: %s\", err.Error())\n        return \"\", fmt.Errorf(\"could not get relation data for ID %s: %w\", relationID, err)\n    }\n\n    endpoints, ok := relationData[\"endpoints\"]\n    if !ok {\n        return \"\", fmt.Errorf(\"no endpoints found in relation data for ID %s\", relationID)\n    }\n\n    return endpoints, nil\n}\n</code></pre> <p>Info</p> <p>Learn more about relation management in charms:</p> <ul> <li>Juju Hook commands </li> <li>goops API reference </li> </ul>"},{"location":"how_to/manage/secrets/","title":"How-to manage secrets","text":"<p>Both Juju users and charms can manage secrets. Here we cover how charms can read and write secrets using <code>goops</code>.</p> <p><code>goops</code> provides functions to manage secrets, allowing you to read, create, grant and revoke secrets. Those are the same functions that Juju exposes through hook commands.</p> <pre><code>package charm\n\nimport (\n    \"fmt\"\n    \"time\"\n\n    \"github.com/gruyaume/goops\"\n)\n\nconst (\n    CaCertificateSecretLabel = \"active-ca-certificates\"\n)\n\nfunc Configure() error {\n    err := generateAndStoreRootCertificate()\n    if err != nil {\n        return fmt.Errorf(\"could not generate and store root certificate: %w\", err)\n    }\n\n    return nil\n}\n\nfunc generateAndStoreRootCertificate() error {\n    _, err := goops.GetSecretByLabel(CaCertificateSecretLabel, false, true)\n    if err != nil {\n        goops.LogInfof(\"could not get secret: %s\", err.Error())\n\n        secretContent := map[string]string{\n            \"private-key\":    \"Example private key\",\n            \"ca-certificate\": \"Example CA certificate\",\n        }\n\n        expiry := time.Now().AddDate(1, 0, 0)\n\n        output, err := goops.AddSecret(&amp;goops.AddSecretOptions{\n            Content:     secretContent,\n            Description: \"ca certificate and private key for the certificates charm\",\n            Expire:      expiry,\n            Label:       CaCertificateSecretLabel,\n            Rotate:      goops.RotateNever,\n            Owner:       goops.OwnerApplication,\n        })\n        if err != nil {\n            return fmt.Errorf(\"could not add secret: %w\", err)\n        }\n\n        goops.LogInfof(\"Created new secret with ID: %s\", output)\n\n        return nil\n    }\n\n    secretInfo, err := goops.GetSecretInfoByLabel(CaCertificateSecretLabel)\n    if err != nil {\n        return fmt.Errorf(\"could not get secret info: %w\", err)\n    }\n\n    if secretInfo == nil {\n        return fmt.Errorf(\"secret info is nil\")\n    }\n\n    return nil\n}\n</code></pre> <p>Info</p> <p>Learn more about secret management in charms:</p> <ul> <li>Juju Hook commands </li> <li>goops API reference </li> </ul>"},{"location":"how_to/manage/state/","title":"How-to manage state","text":"<p>Juju allows charms to store state in a key-value store. Here we cover how you can use <code>goops</code> to set, get, and delete state in your charms. In this simple example, we check whether a state exists for a key named <code>my-key</code>. If it exists, we delete it. If it does not exist, we set it to a value of <code>my-value</code>.</p> <pre><code>package charm\n\nimport (\n    \"fmt\"\n\n    \"github.com/gruyaume/goops\"\n)\n\nconst (\n    StateKey   = \"my-key\"\n    StateValue = \"my-value\"\n)\n\nfunc Configure() error {\n    _, err := goops.GetState(StateKey)\n    if err != nil {\n        goops.LogInfof(\"could not get state: %s\", err.Error())\n\n        err := goops.SetState(StateKey, StateValue)\n        if err != nil {\n            return fmt.Errorf(\"could not set state: %w\", err)\n        }\n\n        goops.LogInfof(\"set state: %s = %s\", StateKey, StateValue)\n\n        return nil\n    }\n\n    goops.LogInfof(\"state already set: %s = %s\", StateKey, StateValue)\n\n    err = goops.DeleteState(StateKey)\n    if err != nil {\n        return fmt.Errorf(\"could not delete state: %w\", err)\n    }\n\n    goops.LogInfof(\"deleted state: %s\", StateKey)\n\n    return nil\n}\n</code></pre> <p>Info</p> <p>Learn more about state management in charms:</p> <ul> <li>Juju Hook commands </li> <li>goops API reference </li> </ul>"},{"location":"how_to/manage/workloads_on_k8s/","title":"How-to manage workloads on Kubernetes","text":"<p>This guide covers how to manage workloads on Kubernetes using <code>goops</code>. Workloads are services that run in sidecar containers, next to the charm container. The charm uses Pebble to manage these workloads. Pebble is a lightweight Linux service manager that allows the charm to manage services, files, and health checks in the application's container.</p>"},{"location":"how_to/manage/workloads_on_k8s/#1-declare-containers","title":"1. Declare containers","text":"<p>Declare the containers in you charm's <code>charmcraft.yaml</code> file. For example:</p> <pre><code>containers:\n  myapp:\n    resource: myapp-image\n\nresources:\n  myapp-image:\n    type: oci-image\n    description: OCI image for my application\n</code></pre> <p>Note</p> <p>For more information on the <code>charmcraft.yaml</code> charm definition, read the official charmcraft documentation.</p>"},{"location":"how_to/manage/workloads_on_k8s/#2-manage-workloads-using-goopspebble","title":"2. Manage workloads using <code>goops.Pebble</code>","text":"<p>You can manage workloads using the <code>goops.Pebble</code> API. In the following example, we initialize a Pebble client for the <code>myapp</code> container, push a configuration file, create a Pebble layer, and start the service.</p> <pre><code>package charm\n\nimport (\n    \"fmt\"\n    \"strings\"\n\n    \"github.com/canonical/pebble/client\"\n    \"github.com/gruyaume/goops\"\n    \"gopkg.in/yaml.v3\"\n)\n\nconst (\n    ConfigPath = \"/etc/config.yaml\"\n)\n\ntype ServiceConfig struct {\n    Override string `yaml:\"override\"`\n    Summary  string `yaml:\"summary\"`\n    Command  string `yaml:\"command\"`\n    Startup  string `yaml:\"startup\"`\n}\n\ntype PebbleLayer struct {\n    Summary     string                   `yaml:\"summary\"`\n    Description string                   `yaml:\"description\"`\n    Services    map[string]ServiceConfig `yaml:\"services\"`\n}\n\ntype PebblePlan struct {\n    Services map[string]ServiceConfig `yaml:\"services\"`\n}\n\nfunc Configure() error {\n    pebble := goops.Pebble(\"myapp\")\n\n    _, err := pebble.SysInfo()\n    if err != nil {\n        return fmt.Errorf(\"could not connect to pebble: %w\", err)\n    }\n\n    err = syncConfig(pebble)\n    if err != nil {\n        return fmt.Errorf(\"could not sync config: %w\", err)\n    }\n\n    err = syncPebbleService(pebble)\n    if err != nil {\n        return fmt.Errorf(\"could not sync pebble service: %w\", err)\n    }\n\n    _ = goops.SetUnitStatus(goops.StatusActive, \"service is running\")\n\n    return nil\n}\n\nfunc syncConfig(pebble goops.PebbleClient) error {\n    expectedConfig := \"Example configuration file for MyApp\"\n\n    err := pebble.Push(&amp;client.PushOptions{\n        Source: strings.NewReader(expectedConfig),\n        Path:   ConfigPath,\n    })\n    if err != nil {\n        return fmt.Errorf(\"could not push file: %w\", err)\n    }\n\n    return nil\n}\n\nfunc syncPebbleService(pebble goops.PebbleClient) error {\n    if !pebbleLayerCreated(pebble) {\n        goops.LogInfof(\"Pebble layer not created\")\n\n        err := addPebbleLayer(pebble)\n        if err != nil {\n            return fmt.Errorf(\"could not add pebble layer: %w\", err)\n        }\n\n        goops.LogInfof(\"Pebble layer created\")\n    }\n\n    _, err := pebble.Start(&amp;client.ServiceOptions{\n        Names: []string{\"notary\"},\n    })\n    if err != nil {\n        return fmt.Errorf(\"could not start pebble service: %w\", err)\n    }\n\n    goops.LogInfof(\"Pebble service started\")\n\n    return nil\n}\n\nfunc pebbleLayerCreated(pebble goops.PebbleClient) bool {\n    dataBytes, err := pebble.PlanBytes(nil)\n    if err != nil {\n        return false\n    }\n\n    var plan PebblePlan\n\n    err = yaml.Unmarshal(dataBytes, &amp;plan)\n    if err != nil {\n        return false\n    }\n\n    service, exists := plan.Services[\"myapp\"]\n    if !exists {\n        return false\n    }\n\n    if service.Command != \"myapp --config \"+ConfigPath {\n        return false\n    }\n\n    return true\n}\n\nfunc addPebbleLayer(pebble goops.PebbleClient) error {\n    layerData, err := yaml.Marshal(PebbleLayer{\n        Summary:     \"MyApp layer\",\n        Description: \"pebble config layer for MyApp\",\n        Services: map[string]ServiceConfig{\n            \"myapp\": {\n                Override: \"replace\",\n                Summary:  \"My App Service\",\n                Command:  \"myapp --config \" + ConfigPath,\n                Startup:  \"enabled\",\n            },\n        },\n    })\n    if err != nil {\n        return fmt.Errorf(\"could not marshal layer data to YAML: %w\", err)\n    }\n\n    err = pebble.AddLayer(&amp;client.AddLayerOptions{\n        Combine:   true,\n        Label:     \"myapp\",\n        LayerData: layerData,\n    })\n    if err != nil {\n        return fmt.Errorf(\"could not add pebble layer: %w\", err)\n    }\n\n    return nil\n}\n</code></pre> <p>Info</p> <p>Learn more about workload management in Kubernetes charms:</p> <ul> <li>Pebble documentation </li> <li>goops API reference </li> </ul>"},{"location":"reference/","title":"Reference","text":"<p>This section provides detailed reference material for Ella Core, from configuration options to complete API documentation.</p> <ul> <li>Example Charms</li> <li>Charm Libraries</li> <li>Charm Development Best Practices</li> <li>Juju Compatibility</li> <li>API Documentation </li> </ul>"},{"location":"reference/best_practices/","title":"Charm Development best Practices","text":"<p>This document outlines best practices for writing robust charms using <code>goops</code>.</p>"},{"location":"reference/best_practices/#write-idempotent-charm-code","title":"Write idempotent charm code","text":"<p>Charm code should be thought of as a reconciliation loop that applies the necessary changes to ensure that the charm's state matches the desired state. Charm code should be idempotent, meaning that running the code multiple times should not change the state of the charm if it is already in the desired state.</p>"},{"location":"reference/best_practices/#use-charm-libraries-for-managing-relation-data","title":"Use Charm Libraries for managing relation data","text":"<p>If you need to read or write to relation data, use the appropriate Charm Library. If the library does not exist, consider creating it.</p>"},{"location":"reference/best_practices/#use-goopstest-for-unit-testing","title":"Use <code>goopstest</code> for unit testing","text":"<p>Use <code>goopstest</code> to write unit tests for your charms in a state-transition style.</p>"},{"location":"reference/best_practices/#be-wary-of-state","title":"Be wary of state","text":"<p>Be wary of managing state in your charm code. Maintaining state becomes increasingly complex the longer the charm is deployed as users upgrade it and the charm code evolves.</p> <p>State includes:</p> <ul> <li>Stored State</li> <li>Secrets</li> <li>Relation data</li> <li>Files on disk</li> </ul>"},{"location":"reference/best_practices/#write-clear-idiomatic-go-code","title":"Write clear, idiomatic Go code","text":"<p>Write clear, idiomatic Go code that is easy to read and understand. Learn more about Go best practices in the Effective Go guide and Google's Go Style Guide.</p>"},{"location":"reference/charm_libraries/","title":"Charm Libraries","text":"<p>We maintain a set of Charm Libraries for <code>goops</code> charms at github.com/gruyaume/charm-libraries for the following integrations:</p> <ul> <li><code>tls_certificates</code>: Securely request and manage TLS certificates.</li> <li><code>loki_push_api</code>: Push logs to a Loki instance.</li> <li><code>prometheus_scrape</code>: Send metrics related information to a Prometheus instance to allow scraping.</li> <li><code>tracing</code>: Receive tracing URLs from a tracing server.</li> </ul> <p>If you need a Charm Library that is not listed here, consider creating it by contributing to the charm-libraries repository.</p>"},{"location":"reference/example_charms/","title":"Example charms","text":"<p>The following charms use <code>goops</code> and can be used as reference implementations:</p> <ul> <li>Certificates: A charm for provisioning TLS certificates using the <code>tls-certificates</code> integration.</li> <li>Notary K8s: A Kubernetes charm for Notary, a TLS certificate authority for enterprise applications. It works on both Kubernetes and machine models.</li> <li>LEGO: A charm for managing Let's Encrypt certificates using the LEGO client. It works on both Kubernetes and machine models.</li> <li>Core K8s: A Kubernetes charm for operating Ella Core, a 5G core network.</li> </ul> <p>Feel free to explore these charms for practical examples of how to use <code>goops</code> in your own charms.</p>"},{"location":"reference/juju_compatibility/","title":"Juju compatibility","text":"<p><code>goops</code> is compatible with Juju 3.6 and later.</p>"},{"location":"tutorials/","title":"Tutorials","text":"<p>In these tutorials, we will write, build, and deploy charms using <code>goops</code>.</p> <ul> <li>Getting Started: A hands-on introduction to <code>goops</code> for new users. Write, build, and deploy your first charm in less than 10 minutes.</li> <li>Write your first Kubernetes charm: Write a complete Kubenetes charm for a web application using <code>goops</code>. Learn how to use <code>goops</code> to manage Pebble services, relations, and configurations. Build and deploy your charm to a Kubernetes cluster.</li> </ul>"},{"location":"tutorials/getting_started/","title":"Getting Started","text":"<p>In this tutorial, we will write, build, and deploy a Go charm using <code>goops</code>. You can expect to spend about 10 minutes completing this tutorial.</p>"},{"location":"tutorials/getting_started/#pre-requisites","title":"Pre-requisites","text":"<p>To complete this tutorial, you will need a Ubuntu 24.04 machine with the following specifications:</p> <ul> <li>Memory: 8GB</li> <li>CPU: 4 cores</li> <li>Disk: 30GB</li> </ul> <p>You will also need the following software installed:</p> <ul> <li>Go (version 1.24 or later)</li> <li>Charmcraft (version 3.4 or later)</li> <li>Juju (version 3.6 or later)</li> </ul>"},{"location":"tutorials/getting_started/#1-write-the-go-charm-using-goops","title":"1. Write the Go charm using <code>goops</code>","text":"<p>Create a new directory for your charm project and initialize a Go module:</p> <pre><code>mkdir my-charm\ncd my-charm\ngo mod init my-charm\n</code></pre> <p>Create a <code>cmd/my-charm/main.go</code> file with the following content:</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"os\"\n\n    \"github.com/gruyaume/goops\"\n)\n\nfunc main() {\n    env := goops.ReadEnv()\n\n    goops.LogInfof(\"Hook name: %s\", env.HookName)\n\n    err := Configure()\n    if err != nil {\n        goops.LogErrorf(\"Error handling hook: %s\", err.Error())\n        os.Exit(1)\n    }\n}\n\ntype Config struct {\n    Username string `json:\"username\"`\n}\n\nfunc Configure() error {\n    isLeader, err := goops.IsLeader()\n    if err != nil {\n        return fmt.Errorf(\"could not check if unit is leader: %w\", err)\n    }\n\n    if !isLeader {\n        err := goops.SetUnitStatus(goops.StatusBlocked, \"Unit is not leader\")\n        if err != nil {\n            return fmt.Errorf(\"could not set unit status: %w\", err)\n        }\n        return nil\n    }\n\n    goops.LogInfof(\"Unit is leader\")\n\n    var config Config\n    err = goops.GetConfig(&amp;config)\n    if err != nil {\n        return fmt.Errorf(\"could not get config: %w\", err)\n    }\n\n    if config.Username == \"\" {\n        err := goops.SetUnitStatus(goops.StatusBlocked, \"Username is not set in config\")\n        if err != nil {\n            return fmt.Errorf(\"could not set unit status: %w\", err)\n        }\n        return nil\n    }\n\n    err = goops.SetUnitStatus(goops.StatusActive, fmt.Sprintf(\"Username is set to '%s'\", config.Username))\n    if err != nil {\n        return fmt.Errorf(\"could not set unit status: %w\", err)\n    }\n\n    return nil\n}\n</code></pre> <p>Install go dependencies:</p> <pre><code>go mod tidy\n</code></pre>"},{"location":"tutorials/getting_started/#2-add-the-charm-definition","title":"2. Add the charm definition","text":"<p>Create a <code>charmcraft.yaml</code> file in the root of your project with the following content:</p> <pre><code>name: my-charm\nsummary: Example Juju charm that uses `goops`\ndescription: |\n  Example Juju charm that uses `goops`\n\ntype: charm\nbase: ubuntu@24.04\nbuild-base: ubuntu@24.04\nplatforms:\n  amd64:\n\nparts:\n  charm:\n    source: .\n    plugin: go\n    build-snaps:\n      - go\n    organize:\n      bin/my-charm: dispatch\n\nconfig:\n  options:\n    username:\n      type: string\n      default: gruyaume\n      description: &gt;\n        Example configuration option for the charm.\n</code></pre>"},{"location":"tutorials/getting_started/#3-build-the-charm","title":"3. Build the charm","text":"<p>Run the following command to build your charm:</p> <pre><code>charmcraft pack --verbose\n</code></pre> <p>This will create a <code>my-charm_amd64.charm</code> file in the current directory.</p>"},{"location":"tutorials/getting_started/#4-deploy-the-charm","title":"4. Deploy the charm","text":"<p>Create a new Juju model:</p> <pre><code>juju add-model demo\n</code></pre> <p>Deploy the charm to the model:</p> <pre><code>juju deploy ./my-charm_amd64.charm --config username=pizza\n</code></pre> <p>Check the status of the deployed charm:</p> <pre><code>juju status\n</code></pre> <p>You should see the unit status as <code>active</code> with the message \"Username is set to 'pizza'\".</p> <pre><code>guillaume@courge:~/my-charm$ juju status\nModel  Controller  Cloud/Region  Version  SLA          Timestamp\ndemo   k8s-jun22   k8s-jun22     3.6.7    unsupported  07:56:18-04:00\n\nApp       Version  Status  Scale  Charm     Channel  Rev  Address        Exposed  Message\nmy-charm           active      1  my-charm             2  10.152.183.98  no       Username is set to 'pizza'\n\nUnit         Workload  Agent  Address     Ports  Message\nmy-charm/0*  active    idle   10.1.0.112         Username is set to 'pizza'\n</code></pre> <p>Success</p> <p>Congratulations! You have successfully written, built, and deployed a charm using <code>goops</code>. You can now explore more features of <code>goops</code> and enhance your charm further.</p>"},{"location":"tutorials/write_your_first_k8s_charm/","title":"Write your first K8s charm","text":"<p>In this tutorial, we will write a Kubernetes charm in Go for a web application using <code>goops</code>. The application we will charm is called myapp, a simple web application that displays <code>\"MyApp, '/'\"</code>. This tutorial will take about 30 minutes to complete and you will how to use <code>goops</code> to manage Pebble services, relations, and configurations. You will also build your charm and deploy it to a Kubernetes cluster.</p> <ul> <li>1. Write a charm for <code>myapp</code></li> <li>2. Make the port configurable</li> <li>3. Integrate with Loki</li> <li>4. Add unit tests using <code>goopstest</code></li> </ul> <p>At any moment, you can refer to the MyApp K8s Operator GitHub repository for the complete code of the charm we will write in this tutorial.</p>"},{"location":"tutorials/write_your_first_k8s_charm/add_unit_tests/","title":"2. Add unit tests using <code>goopstest</code>","text":"<p>In this section, we will write unit tests for the charm using <code>goopstest</code>. This step of the tutorial assumes you have completed the previous step.</p>"},{"location":"tutorials/write_your_first_k8s_charm/add_unit_tests/#21-write-the-unit-tests","title":"2.1 Write the unit tests","text":""},{"location":"tutorials/write_your_first_k8s_charm/add_unit_tests/#211-status-is-blocked-given-invalid-port-configuration","title":"2.1.1 Status is blocked given invalid port configuration","text":"<p>Here we will write a unit test that validates that the unit stauts is blocked given an invalid configuration. Create a new file <code>internal/charm/charm_test.go</code> with the following content:</p> <pre><code>package charm_test\n\nimport (\n    \"myapp-k8s-operator/internal/charm\"\n    \"testing\"\n\n    \"github.com/gruyaume/goops/goopstest\"\n)\n\nfunc TestGivenBadPortConfigWhenAnyEventThenStatusBlocked(t *testing.T) {\n    ctx := goopstest.NewContext(\n        charm.Configure,\n    )\n    stateIn := goopstest.State{\n        Config: map[string]any{\n            \"port\": 0, // Invalid port\n        },\n        Containers: []goopstest.Container{\n            {\n                Name:       \"myapp\",\n                CanConnect: true,\n            },\n        },\n    }\n\n    stateOut := ctx.Run(\"update-status\", stateIn)\n\n    expectedStatus := goopstest.Status{\n        Name:    goopstest.StatusBlocked,\n        Message: \"invalid config: port must be between 1 and 65535\",\n    }\n    if stateOut.UnitStatus != expectedStatus {\n        t.Errorf(\"expected status %v, got %v\", expectedStatus, stateOut.UnitStatus)\n    }\n}\n</code></pre>"},{"location":"tutorials/write_your_first_k8s_charm/add_unit_tests/#212-status-is-active-given-valid-configuration","title":"2.1.2 Status is active given valid configuration","text":"<p>Now, we will write a unit test that validates that the unit status is active given a valid configuration. Add the following test to the same file:</p> <pre><code>func TestGivenValidConfigWhenAnyEventThenStatusActive(t *testing.T) {\n    ctx := goopstest.NewContext(\n        charm.Configure,\n    )\n    stateIn := goopstest.State{\n        Config: map[string]any{\n            \"port\": 8080,\n        },\n        Containers: []goopstest.Container{\n            {\n                Name:       \"myapp\",\n                CanConnect: true,\n            },\n        },\n    }\n\n    stateOut := ctx.Run(\"update-status\", stateIn)\n\n    expectedStatus := goopstest.Status{\n        Name:    goopstest.StatusActive,\n        Message: \"service is running on port 8080\",\n    }\n    if stateOut.UnitStatus != expectedStatus {\n        t.Errorf(\"expected status %v, got %v\", expectedStatus, stateOut.UnitStatus)\n    }\n}\n</code></pre>"},{"location":"tutorials/write_your_first_k8s_charm/add_unit_tests/#213-pebble-layer-is-added-given-valid-configuration","title":"2.1.3 Pebble layer is added given valid configuration","text":"<p>Finally, we will write a unit test that validates that the Pebble layer is added when the configuration is valid. Add the following test to the same file:</p> <pre><code>func TestGivenValidConfigWhenAnyEventThenPebbleLayerIsAdded(t *testing.T) {\n    ctx := goopstest.NewContext(\n        charm.Configure,\n    )\n    stateIn := goopstest.State{\n        Config: map[string]any{\n            \"port\": 8080, // Valid port\n        },\n        Containers: []goopstest.Container{\n            {\n                Name:       \"myapp\",\n                CanConnect: true,\n            },\n        },\n    }\n\n    stateOut := ctx.Run(\"update-status\", stateIn)\n\n    got := stateOut.Containers[0].Layers[\"myapp\"]\n\n    want := goopstest.Layer{\n        Summary:     \"MyApp layer\",\n        Description: \"pebble config layer for MyApp\",\n        Services: map[string]goopstest.Service{\n            \"myapp\": {\n                Summary:  \"My App Service\",\n                Command:  \"myapp -config /etc/myapp/config.yaml\",\n                Startup:  \"enabled\",\n                Override: \"replace\",\n            },\n        },\n    }\n\n    if diff := cmp.Diff(want, got); diff != \"\" {\n        t.Errorf(\"unexpected pebble layer (-want +got):\\n%s\", diff)\n    }\n}\n</code></pre> <p>Update the import statement at the top of the file to include the <code>cmp</code> package:</p> <pre><code>import (\n    \"github.com/google/go-cmp/cmp\"\n)\n</code></pre> <p>Update the packages:</p> <pre><code>go mod tidy\n</code></pre>"},{"location":"tutorials/write_your_first_k8s_charm/add_unit_tests/#22-run-the-tests","title":"2.2 Run the tests","text":"<p>Run the tests using the <code>go test</code> command:</p> <pre><code>go test -cover ./...\n</code></pre> <p>You should see output indicating that the tests passed:</p> <pre><code>guillaume@courge:~/code/myapp-k8s-operator$ go test -cover ./...\n        myapp-k8s-operator/cmd/myapp-k8s-operator               coverage: 0.0% of statements\nok      myapp-k8s-operator/internal/charm       (cached)        coverage: 75.0% of statements\n</code></pre>"},{"location":"tutorials/write_your_first_k8s_charm/integrate_with_loki/","title":"3. Integrate with Loki","text":"<p>In this section, we will integrate the <code>myapp</code> charm charm with Loki to send workload logs. This step of the tutorial assumes you have completed the previous step.</p>"},{"location":"tutorials/write_your_first_k8s_charm/integrate_with_loki/#31-update-the-go-charm","title":"3.1 Update the Go charm","text":"<p>Open the <code>internal/charm/charm.go</code> file, instantiate a Logging object from the <code>charm-libraries</code> package and enable the logging endpoint. Here's the updated code:</p> <pre><code>package charm\n\nimport (\n    \"bytes\"\n    \"fmt\"\n    \"strings\"\n\n    \"github.com/canonical/pebble/client\"\n    \"github.com/gruyaume/charm-libraries/logging\"\n    \"github.com/gruyaume/goops\"\n    \"gopkg.in/yaml.v3\"\n)\n\nconst (\n    ConfigPath             = \"/etc/myapp/config.yaml\"\n    LoggingIntegrationName = \"logging\"\n    ServiceName            = \"myapp\"\n    ContainerName          = \"myapp\"\n)\n\ntype ServiceConfig struct {\n    Override string `yaml:\"override\"`\n    Summary  string `yaml:\"summary\"`\n    Command  string `yaml:\"command\"`\n    Startup  string `yaml:\"startup\"`\n}\n\ntype PebbleLayer struct {\n    Summary     string                   `yaml:\"summary\"`\n    Description string                   `yaml:\"description\"`\n    Services    map[string]ServiceConfig `yaml:\"services\"`\n}\n\ntype PebblePlan struct {\n    Services map[string]ServiceConfig `yaml:\"services\"`\n}\n\ntype JujuConfig struct {\n    Port int `json:\"port\"`\n}\n\nfunc Configure() error {\n    c := JujuConfig{}\n\n    err := goops.GetConfig(&amp;c)\n    if err != nil {\n        return fmt.Errorf(\"could not get config: %w\", err)\n    }\n\n    if c.Port &lt; 1 || c.Port &gt; 65535 {\n        _ = goops.SetUnitStatus(goops.StatusBlocked, \"invalid config: port must be between 1 and 65535\")\n        return nil\n    }\n\n    err = goops.SetPorts([]*goops.Port{\n        {Port: c.Port, Protocol: goops.ProtocolTCP},\n    })\n    if err != nil {\n        return fmt.Errorf(\"could not set ports: %w\", err)\n    }\n\n    pebble := goops.Pebble(ContainerName)\n\n    _, err = pebble.SysInfo()\n    if err != nil {\n        _ = goops.SetUnitStatus(goops.StatusWaiting, \"waiting for pebble to be ready\")\n        return nil\n    }\n\n    configFileChanged, err := syncConfig(pebble, c.Port)\n    if err != nil {\n        return fmt.Errorf(\"could not sync config: %w\", err)\n    }\n\n    err = syncPebbleService(pebble)\n    if err != nil {\n        return fmt.Errorf(\"could not sync pebble service: %w\", err)\n    }\n\n    if configFileChanged {\n        _, err = pebble.Restart(\n            &amp;client.ServiceOptions{\n                Names: []string{ServiceName},\n            },\n        )\n        if err != nil {\n            return fmt.Errorf(\"could not start pebble service: %w\", err)\n        }\n\n        goops.LogInfof(\"Pebble service restarted\")\n    }\n\n    i := &amp;logging.Integration{\n        RelationName:  LoggingIntegrationName,\n        ContainerName: ContainerName,\n    }\n\n    err = i.EnableEndpoints()\n    if err != nil {\n        goops.LogDebugf(\"Could not enable logging endpoints: %v\", err)\n    }\n\n    _ = goops.SetUnitStatus(goops.StatusActive, \"service is running on port\", fmt.Sprintf(\"%d\", c.Port))\n\n    return nil\n}\n\ntype MyAppConfig struct {\n    Port int `yaml:\"port\"`\n}\n\nfunc getExpectedConfig(port int) ([]byte, error) {\n    c := MyAppConfig{\n        Port: port,\n    }\n\n    b, err := yaml.Marshal(c)\n    if err != nil {\n        return nil, fmt.Errorf(\"could not marshal config to YAML: %w\", err)\n    }\n\n    return b, nil\n}\n\nfunc syncConfig(pebble goops.PebbleClient, port int) (bool, error) {\n    expectedContent, err := getExpectedConfig(port)\n    if err != nil {\n        return false, fmt.Errorf(\"could not get expected config: %w\", err)\n    }\n\n    target := &amp;bytes.Buffer{}\n\n    err = pebble.Pull(&amp;client.PullOptions{\n        Path:   ConfigPath,\n        Target: target,\n    })\n    if err != nil {\n        goops.LogInfof(\"could not pull existing config from pebble: %v\", err)\n    }\n\n    if target.String() == string(expectedContent) {\n        goops.LogInfof(\"Config file is already up to date at %s\", ConfigPath)\n        return false, nil\n    }\n\n    err = pebble.Push(&amp;client.PushOptions{\n        Source: strings.NewReader(string(expectedContent)),\n        Path:   ConfigPath,\n    })\n    if err != nil {\n        return false, fmt.Errorf(\"could not push config to pebble: %w\", err)\n    }\n\n    goops.LogInfof(\"Config file pushed to %s\", ConfigPath)\n\n    return true, nil\n}\n\nfunc syncPebbleService(pebble goops.PebbleClient) error {\n    err := addPebbleLayer(pebble)\n    if err != nil {\n        return fmt.Errorf(\"could not add pebble layer: %w\", err)\n    }\n\n    goops.LogInfof(\"Pebble layer created\")\n\n    _, err = pebble.Start(&amp;client.ServiceOptions{\n        Names: []string{ServiceName},\n    })\n    if err != nil {\n        return fmt.Errorf(\"could not start pebble service: %w\", err)\n    }\n\n    goops.LogInfof(\"Pebble service started\")\n\n    return nil\n}\n\nfunc addPebbleLayer(pebble goops.PebbleClient) error {\n    layerData, err := yaml.Marshal(PebbleLayer{\n        Summary:     \"MyApp layer\",\n        Description: \"pebble config layer for MyApp\",\n        Services: map[string]ServiceConfig{\n            ServiceName: {\n                Override: \"replace\",\n                Summary:  \"My App Service\",\n                Command:  \"myapp -config \" + ConfigPath,\n                Startup:  \"enabled\",\n            },\n        },\n    })\n    if err != nil {\n        return fmt.Errorf(\"could not marshal layer data to YAML: %w\", err)\n    }\n\n    err = pebble.AddLayer(&amp;client.AddLayerOptions{\n        Combine:   true,\n        Label:     \"myapp\",\n        LayerData: layerData,\n    })\n    if err != nil {\n        return fmt.Errorf(\"could not add pebble layer: %w\", err)\n    }\n\n    return nil\n}\n</code></pre> <p>Install the go dependencies:</p> <pre><code>go mod tidy\n</code></pre>"},{"location":"tutorials/write_your_first_k8s_charm/integrate_with_loki/#32-update-the-charm-definition","title":"3.2 Update the charm definition","text":"<p>Add a requires section to the <code>charmcraft.yaml</code> file:</p> <pre><code>...\nrequires:\n  logging:\n    interface: loki_push_api\n    limit: 1\n</code></pre>"},{"location":"tutorials/write_your_first_k8s_charm/integrate_with_loki/#33-build-the-charm","title":"3.3 Build the charm","text":"<p>Build the charm:</p> <pre><code>charmcraft pack --verbose\n</code></pre>"},{"location":"tutorials/write_your_first_k8s_charm/integrate_with_loki/#34-deploy-the-charm","title":"3.4 Deploy the charm","text":"<p>Deploy the charm to your Kubernetes cluster:</p> <pre><code>juju deploy ./myapp-k8s_amd64.charm --resource myapp-image=ghcr.io/gruyaume/myapp:latest\n</code></pre>"},{"location":"tutorials/write_your_first_k8s_charm/integrate_with_loki/#35-deploy-cos-lite","title":"3.5 Deploy COS Lite","text":"<p>Create a new Juju model for Canonical Observability Stack (COS):</p> <pre><code>juju add-model cos\n</code></pre> <p>Deploy the COS Lite bundle:</p> <pre><code>juju deploy cos-lite\n</code></pre> <p>Create an integration offer for Loki:</p> <pre><code>juju offer cos.loki:logging\n</code></pre> <p>Retrieve the Grafana admin password:</p> <pre><code>juju run grafana/leader get-admin-password\n</code></pre> <p>You should see output similar to this:</p> <pre><code>guillaume@courge:~$ juju run grafana/leader get-admin-password\nRunning operation 13 with 1 task\n  - task 14 on unit-grafana-0\n\nWaiting for task 14...\nadmin-password: NwrZneKKBZLn\nurl: http://10.0.0.3/cos-grafana\n</code></pre> <p>Navigate to the Grafana URL in your web browser, login with the <code>admin</code> username and the password returned by the action.</p>"},{"location":"tutorials/write_your_first_k8s_charm/integrate_with_loki/#36-integrate-myapp-k8s-with-loki-k8s","title":"3.6 Integrate <code>myapp-k8s</code> with <code>loki-k8s</code>","text":"<p>Switch back to the <code>demo</code> model:</p> <pre><code>juju switch demo\n</code></pre> <p>Consume the Loki integration offer:</p> <pre><code>juju consume cos.loki\n</code></pre> <p>Integrate <code>myapp-k8s</code> with <code>loki-k8s</code>:</p> <pre><code>juju integrate myapp-k8s:logging loki:logging\n</code></pre>"},{"location":"tutorials/write_your_first_k8s_charm/integrate_with_loki/#37-visualize-the-logs-in-grafana","title":"3.7 Visualize the logs in Grafana","text":"<p>Navigate Grafana in your web browser, click on the <code>Explore</code> icon in the left sidebar, click on the <code>Loki</code> data source, and enter the following query: <code>{charm=\"myapp-k8s\"}</code>. You should see the logs from your <code>myapp-k8s</code> charm, specifically <code>Server started on port 8080</code>.</p> <p></p>"},{"location":"tutorials/write_your_first_k8s_charm/make_port_configurable/","title":"2. Make the port configurable","text":"<p>We will add a configuration option to our <code>myapp</code> charm that allows the user to set the port on which the application listens. This step of the tutorial assumes you have completed the previous step.</p>"},{"location":"tutorials/write_your_first_k8s_charm/make_port_configurable/#21-update-the-go-charm","title":"2.1 Update the Go charm","text":"<p>Open the <code>internal/charm/charm.go</code> file, remove the hardcoded port, read the port from the Juju configuration options, and use it to write the configuration file. Here's the updated code:</p> <pre><code>package charm\n\nimport (\n    \"bytes\"\n    \"fmt\"\n    \"strings\"\n\n    \"github.com/canonical/pebble/client\"\n    \"github.com/gruyaume/goops\"\n    \"gopkg.in/yaml.v3\"\n)\n\nconst (\n    ConfigPath = \"/etc/myapp/config.yaml\"\n)\n\ntype ServiceConfig struct {\n    Override string `yaml:\"override\"`\n    Summary  string `yaml:\"summary\"`\n    Command  string `yaml:\"command\"`\n    Startup  string `yaml:\"startup\"`\n}\n\ntype PebbleLayer struct {\n    Summary     string                   `yaml:\"summary\"`\n    Description string                   `yaml:\"description\"`\n    Services    map[string]ServiceConfig `yaml:\"services\"`\n}\n\ntype PebblePlan struct {\n    Services map[string]ServiceConfig `yaml:\"services\"`\n}\n\ntype JujuConfig struct {\n    Port int `json:\"port\"`\n}\n\nfunc Configure() error {\n    c := JujuConfig{}\n\n    err := goops.GetConfig(&amp;c)\n    if err != nil {\n        return fmt.Errorf(\"could not get config: %w\", err)\n    }\n\n    if c.Port &lt; 1 || c.Port &gt; 65535 {\n        _ = goops.SetUnitStatus(goops.StatusBlocked, \"invalid config: port must be between 1 and 65535\")\n        return nil\n    }\n\n    err = goops.SetPorts([]*goops.Port{\n        {Port: c.Port, Protocol: goops.ProtocolTCP},\n    })\n    if err != nil {\n        return fmt.Errorf(\"could not set ports: %w\", err)\n    }\n\n    pebble := goops.Pebble(\"myapp\")\n\n    _, err = pebble.SysInfo()\n    if err != nil {\n        _ = goops.SetUnitStatus(goops.StatusWaiting, \"waiting for pebble to be ready\")\n        return nil\n    }\n\n    configFileChanged, err := syncConfig(pebble, c.Port)\n    if err != nil {\n        return fmt.Errorf(\"could not sync config: %w\", err)\n    }\n\n    err = syncPebbleService(pebble)\n    if err != nil {\n        return fmt.Errorf(\"could not sync pebble service: %w\", err)\n    }\n\n    if configFileChanged {\n        _, err = pebble.Restart(\n            &amp;client.ServiceOptions{\n                Names: []string{\"myapp\"},\n            },\n        )\n        if err != nil {\n            return fmt.Errorf(\"could not start pebble service: %w\", err)\n        }\n\n        goops.LogInfof(\"Pebble service restarted\")\n    }\n\n    _ = goops.SetUnitStatus(goops.StatusActive, \"service is running on port\", fmt.Sprintf(\"%d\", c.Port))\n\n    return nil\n}\n\ntype MyAppConfig struct {\n    Port int `yaml:\"port\"`\n}\n\nfunc getExpectedConfig(port int) ([]byte, error) {\n    myappConfig := MyAppConfig{\n        Port: port,\n    }\n\n    b, err := yaml.Marshal(myappConfig)\n    if err != nil {\n        return nil, fmt.Errorf(\"could not marshal config to YAML: %w\", err)\n    }\n\n    return b, nil\n}\n\nfunc syncConfig(pebble goops.PebbleClient, port int) (bool, error) {\n    expectedContent, err := getExpectedConfig(port)\n    if err != nil {\n        return false, fmt.Errorf(\"could not get expected config: %w\", err)\n    }\n\n    target := &amp;bytes.Buffer{}\n\n    err = pebble.Pull(&amp;client.PullOptions{\n        Path:   ConfigPath,\n        Target: target,\n    })\n    if err != nil {\n        goops.LogInfof(\"could not pull existing config from pebble: %v\", err)\n    }\n\n    if target.String() == string(expectedContent) {\n        goops.LogInfof(\"Config file is already up to date at %s\", ConfigPath)\n        return false, nil\n    }\n\n    err = pebble.Push(&amp;client.PushOptions{\n        Source: strings.NewReader(string(expectedContent)),\n        Path:   ConfigPath,\n    })\n    if err != nil {\n        return false, fmt.Errorf(\"could not push config to pebble: %w\", err)\n    }\n\n    goops.LogInfof(\"Config file pushed to %s\", ConfigPath)\n\n    return true, nil\n}\n\nfunc syncPebbleService(pebble goops.PebbleClient) error {\n    err := addPebbleLayer(pebble)\n    if err != nil {\n        return fmt.Errorf(\"could not add pebble layer: %w\", err)\n    }\n\n    goops.LogInfof(\"Pebble layer created\")\n\n    _, err = pebble.Start(&amp;client.ServiceOptions{\n        Names: []string{\"myapp\"},\n    })\n    if err != nil {\n        return fmt.Errorf(\"could not start pebble service: %w\", err)\n    }\n\n    goops.LogInfof(\"Pebble service started\")\n\n    return nil\n}\n\nfunc addPebbleLayer(pebble goops.PebbleClient) error {\n    layerData, err := yaml.Marshal(PebbleLayer{\n        Summary:     \"MyApp layer\",\n        Description: \"pebble config layer for MyApp\",\n        Services: map[string]ServiceConfig{\n            \"myapp\": {\n                Override: \"replace\",\n                Summary:  \"My App Service\",\n                Command:  \"myapp -config /etc/myapp/config.yaml\",\n                Startup:  \"enabled\",\n            },\n        },\n    })\n    if err != nil {\n        return fmt.Errorf(\"could not marshal layer data to YAML: %w\", err)\n    }\n\n    err = pebble.AddLayer(&amp;client.AddLayerOptions{\n        Combine:   true,\n        Label:     \"myapp\",\n        LayerData: layerData,\n    })\n    if err != nil {\n        return fmt.Errorf(\"could not add pebble layer: %w\", err)\n    }\n\n    return nil\n}\n</code></pre>"},{"location":"tutorials/write_your_first_k8s_charm/make_port_configurable/#22-update-the-charm-definition","title":"2.2 Update the charm definition","text":"<p>Add a configuration option to the <code>charmcraft.yaml</code> file:</p> <pre><code>...\nconfig:\n  options:\n    port:\n      type: int\n      default: 8080\n      description: &gt;\n        The port on which the application will listen.\n</code></pre>"},{"location":"tutorials/write_your_first_k8s_charm/make_port_configurable/#23-build-the-charm","title":"2.3 Build the charm","text":"<p>Build the charm:</p> <pre><code>charmcraft pack --verbose\n</code></pre>"},{"location":"tutorials/write_your_first_k8s_charm/make_port_configurable/#24-deploy-the-charm","title":"2.4 Deploy the charm","text":"<p>Deploy the charm to your Kubernetes cluster:</p> <pre><code>juju deploy ./myapp-k8s_amd64.charm --resource myapp-image=ghcr.io/gruyaume/myapp:latest\n</code></pre> <p>Open a web browser and navigate to the address of the <code>myapp-k8s</code> application on port 8080.</p>"},{"location":"tutorials/write_your_first_k8s_charm/make_port_configurable/#25-change-the-configuration-option","title":"2.5 Change the configuration option","text":"<p>Change the configuration option to a different port:</p> <pre><code>juju config myapp-k8s port=8081\n</code></pre> <p>Open a web browser and navigate to the address of the <code>myapp-k8s</code> application on port 8081. You should see the same application running, but now on port 8081.</p>"},{"location":"tutorials/write_your_first_k8s_charm/write_charm_for_my_app/","title":"1. Write a charm for <code>myapp</code>","text":"<p>We will write a Kubernetes charm for an application named myapp. This simple web application requires a configuration file that contains the port on which it listens.</p>"},{"location":"tutorials/write_your_first_k8s_charm/write_charm_for_my_app/#11-write-the-go-charm-using-goops","title":"1.1. Write the Go charm using <code>goops</code>","text":"<p>Create a new directory for your charm project and initialize a Go module:</p> <pre><code>mkdir myapp-k8s-operator\ncd myapp-k8s-operator\ngo mod init myapp-k8s-operator\n</code></pre> <p>Create a <code>cmd/myapp-k8s-operator/main.go</code> file with the following content:</p> <pre><code>package main\n\nimport (\n    \"myapp-k8s-operator/internal/charm\"\n    \"os\"\n\n    \"github.com/gruyaume/goops\"\n)\n\nfunc main() {\n    err := charm.Configure()\n    if err != nil {\n        goops.LogErrorf(\"Failed to configure charm: %v\", err)\n        os.Exit(1)\n    }\n}\n</code></pre> <p>Create a <code>internal/charm/charm.go</code> file with the following content:</p> <pre><code>package charm\n\nimport (\n    \"bytes\"\n    \"fmt\"\n    \"strings\"\n\n    \"github.com/canonical/pebble/client\"\n    \"github.com/gruyaume/goops\"\n    \"gopkg.in/yaml.v3\"\n)\n\nconst (\n    Port       = 8080\n    ConfigPath = \"/etc/myapp/config.yaml\"\n)\n\ntype ServiceConfig struct {\n    Override string `yaml:\"override\"`\n    Summary  string `yaml:\"summary\"`\n    Command  string `yaml:\"command\"`\n    Startup  string `yaml:\"startup\"`\n}\n\ntype PebbleLayer struct {\n    Summary     string                   `yaml:\"summary\"`\n    Description string                   `yaml:\"description\"`\n    Services    map[string]ServiceConfig `yaml:\"services\"`\n}\n\ntype PebblePlan struct {\n    Services map[string]ServiceConfig `yaml:\"services\"`\n}\n\nfunc Configure() error {\n    err := goops.SetPorts([]*goops.Port{\n        {Port: Port, Protocol: goops.ProtocolTCP},\n    })\n    if err != nil {\n        return fmt.Errorf(\"could not set ports: %w\", err)\n    }\n\n    pebble := goops.Pebble(\"myapp\")\n\n    _, err = pebble.SysInfo()\n    if err != nil {\n        _ = goops.SetUnitStatus(goops.StatusWaiting, \"waiting for pebble to be ready\")\n        return nil\n    }\n\n    configFileChanged, err := syncConfig(pebble, Port)\n    if err != nil {\n        return fmt.Errorf(\"could not sync config: %w\", err)\n    }\n\n    err = syncPebbleService(pebble)\n    if err != nil {\n        return fmt.Errorf(\"could not sync pebble service: %w\", err)\n    }\n\n    if configFileChanged {\n        _, err = pebble.Restart(\n            &amp;client.ServiceOptions{\n                Names: []string{\"myapp\"},\n            },\n        )\n        if err != nil {\n            return fmt.Errorf(\"could not start pebble service: %w\", err)\n        }\n\n        goops.LogInfof(\"Pebble service restarted\")\n    }\n\n    _ = goops.SetUnitStatus(goops.StatusActive, \"service is running on port\", fmt.Sprintf(\"%d\", Port))\n\n    return nil\n}\n\ntype MyAppConfig struct {\n    Port int `yaml:\"port\"`\n}\n\nfunc getExpectedConfig(port int) ([]byte, error) {\n    myappConfig := MyAppConfig{\n        Port: port,\n    }\n\n    b, err := yaml.Marshal(myappConfig)\n    if err != nil {\n        return nil, fmt.Errorf(\"could not marshal config to YAML: %w\", err)\n    }\n\n    return b, nil\n}\n\nfunc syncConfig(pebble goops.PebbleClient, port int) (bool, error) {\n    expectedContent, err := getExpectedConfig(port)\n    if err != nil {\n        return false, fmt.Errorf(\"could not get expected config: %w\", err)\n    }\n\n    target := &amp;bytes.Buffer{}\n\n    err = pebble.Pull(&amp;client.PullOptions{\n        Path:   ConfigPath,\n        Target: target,\n    })\n    if err != nil {\n        goops.LogInfof(\"could not pull existing config from pebble: %v\", err)\n    }\n\n    if target.String() == string(expectedContent) {\n        goops.LogInfof(\"Config file is already up to date at %s\", ConfigPath)\n        return false, nil\n    }\n\n    err = pebble.Push(&amp;client.PushOptions{\n        Source: strings.NewReader(string(expectedContent)),\n        Path:   ConfigPath,\n    })\n    if err != nil {\n        return false, fmt.Errorf(\"could not push config to pebble: %w\", err)\n    }\n\n    goops.LogInfof(\"Config file pushed to %s\", ConfigPath)\n\n    return true, nil\n}\n\nfunc syncPebbleService(pebble goops.PebbleClient) error {\n    err := addPebbleLayer(pebble)\n    if err != nil {\n        return fmt.Errorf(\"could not add pebble layer: %w\", err)\n    }\n\n    goops.LogInfof(\"Pebble layer created\")\n\n    _, err = pebble.Start(&amp;client.ServiceOptions{\n        Names: []string{\"myapp\"},\n    })\n    if err != nil {\n        return fmt.Errorf(\"could not start pebble service: %w\", err)\n    }\n\n    goops.LogInfof(\"Pebble service started\")\n\n    return nil\n}\n\nfunc addPebbleLayer(pebble goops.PebbleClient) error {\n    layerData, err := yaml.Marshal(PebbleLayer{\n        Summary:     \"MyApp layer\",\n        Description: \"pebble config layer for MyApp\",\n        Services: map[string]ServiceConfig{\n            \"myapp\": {\n                Override: \"replace\",\n                Summary:  \"My App Service\",\n                Command:  \"myapp -config /etc/myapp/config.yaml\",\n                Startup:  \"enabled\",\n            },\n        },\n    })\n    if err != nil {\n        return fmt.Errorf(\"could not marshal layer data to YAML: %w\", err)\n    }\n\n    err = pebble.AddLayer(&amp;client.AddLayerOptions{\n        Combine:   true,\n        Label:     \"myapp\",\n        LayerData: layerData,\n    })\n    if err != nil {\n        return fmt.Errorf(\"could not add pebble layer: %w\", err)\n    }\n\n    return nil\n}\n</code></pre> <p>Install the go dependencies:</p> <pre><code>go mod tidy\n</code></pre>"},{"location":"tutorials/write_your_first_k8s_charm/write_charm_for_my_app/#12-add-the-charm-definition","title":"1.2. Add the charm definition","text":"<p>Create a <code>charmcraft.yaml</code> file in the root of your project with the following content:</p> <pre><code>name: myapp-k8s\nsummary: A Kubernetes charm for `myapp`\ndescription: |\n  A Kubernetes charm for `myapp`.\n\ntype: charm\nbase: ubuntu@24.04\nbuild-base: ubuntu@24.04\nplatforms:\n  amd64:\n\nparts:\n  charm:\n    source: .\n    plugin: go\n    build-snaps:\n      - go\n    organize:\n      bin/myapp-k8s-operator: dispatch\n\ncontainers:\n  myapp:\n    resource: myapp-image\n    mounts:\n    - storage: config\n      location: /etc/myapp\n\nstorage:\n  config:\n    type: filesystem\n    minimum-size: 5M\n\nresources:\n  myapp-image:\n    type: oci-image\n    description: OCI image for myapp\n    upstream-source: ghcr.io/gruyaume/myapp:v0.0.1\n</code></pre>"},{"location":"tutorials/write_your_first_k8s_charm/write_charm_for_my_app/#13-build-the-charm","title":"1.3. Build the charm","text":"<p>Build the charm using <code>charmcraft</code>:</p> <pre><code>charmcraft pack --verbose\n</code></pre> <p>This will create a <code>myapp-k8s_amd64.charm</code> file in the current directory.</p>"},{"location":"tutorials/write_your_first_k8s_charm/write_charm_for_my_app/#14-deploy-the-charm","title":"1.4. Deploy the charm","text":"<p>Create a new Juju model:</p> <pre><code>juju add-model demo\n</code></pre> <p>Deploy the charm to the model:</p> <pre><code>juju deploy ./myapp-k8s_amd64.charm --resource myapp-image=ghcr.io/gruyaume/myapp:latest\n</code></pre> <p>Verify that the charm is running:</p> <pre><code>juju status\n</code></pre> <p>You should see the <code>myapp-k8s</code> application in the status output, indicating that it is active and running.</p> <pre><code>Model  Controller  Cloud/Region  Version  SLA          Timestamp\ndemo   k8s-jul1    k8s-jul1      3.6.7    unsupported  09:47:22-04:00\n\nApp        Version  Status  Scale  Charm      Channel  Rev  Address         Exposed  Message\nmyapp-k8s           active      1  myapp-k8s             2  10.152.183.113  no       service is running\n\nUnit          Workload  Agent  Address    Ports  Message\nmyapp-k8s/0*  active    idle   10.1.0.95         service is running\n</code></pre>"},{"location":"tutorials/write_your_first_k8s_charm/write_charm_for_my_app/#15-access-the-application","title":"1.5. Access the application","text":"<p>Open a web browser and navigate to the address of the <code>myapp-k8s</code> application. Here this address is <code>http://10.1.0.95:8080</code>, replace the IP address with the one shown in the unit address in the <code>juju status</code> output. You should see a page displaying <code>MyApp, \"/\"</code>.</p>"}]}